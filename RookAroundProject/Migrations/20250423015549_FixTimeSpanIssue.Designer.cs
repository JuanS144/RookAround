// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RookAroundProject;

#nullable disable

namespace RookAround.Migrations
{
    [DbContext(typeof(RookAroundContext))]
    [Migration("20250423015549_FixTimeSpanIssue")]
    partial class FixTimeSpanIssue
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PlayerTournament", b =>
                {
                    b.Property<int>("ParticipatingTournamentsId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayersId")
                        .HasColumnType("integer");

                    b.HasKey("ParticipatingTournamentsId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("TournamentPlayers", (string)null);
                });

            modelBuilder.Entity("RookAroundProject.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Pwd")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("RookAroundProject.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<string>("MatchMode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Player1Id")
                        .HasColumnType("integer");

                    b.Property<int?>("Player2Id")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("TournamentId1");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("RookAroundProject.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlayerType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasDiscriminator<string>("PlayerType").HasValue("Player");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RookAroundProject.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("RookAroundProject.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableSpots")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("GMId")
                        .HasColumnType("integer");

                    b.Property<bool>("MatchModeHasGM")
                        .HasColumnType("boolean");

                    b.Property<string>("MatchModeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GMId");

                    b.HasIndex("VenueId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("RookAroundProject.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("RookAroundProject.BasicPlayer", b =>
                {
                    b.HasBaseType("RookAroundProject.Player");

                    b.PrimitiveCollection<List<int>>("TournamentIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasDiscriminator().HasValue("BasicPlayer");
                });

            modelBuilder.Entity("RookAroundProject.GMPlayer", b =>
                {
                    b.HasBaseType("RookAroundProject.Player");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.HasDiscriminator().HasValue("GMPlayer");
                });

            modelBuilder.Entity("PlayerTournament", b =>
                {
                    b.HasOne("RookAroundProject.Tournament", null)
                        .WithMany()
                        .HasForeignKey("ParticipatingTournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RookAroundProject.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RookAroundProject.Match", b =>
                {
                    b.HasOne("RookAroundProject.Tournament", null)
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId");

                    b.HasOne("RookAroundProject.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("RookAroundProject.Resource", b =>
                {
                    b.HasOne("RookAroundProject.Tournament", null)
                        .WithMany("TotalResources")
                        .HasForeignKey("TournamentId");
                });

            modelBuilder.Entity("RookAroundProject.Tournament", b =>
                {
                    b.HasOne("RookAroundProject.GMPlayer", "GM")
                        .WithMany()
                        .HasForeignKey("GMId");

                    b.HasOne("RookAroundProject.Venue", "Venue")
                        .WithMany("HostingTournaments")
                        .HasForeignKey("VenueId");

                    b.Navigation("GM");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("RookAroundProject.Tournament", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("TotalResources");
                });

            modelBuilder.Entity("RookAroundProject.Venue", b =>
                {
                    b.Navigation("HostingTournaments");
                });
#pragma warning restore 612, 618
        }
    }
}
